# -*- coding: utf-8 -*-
"""banco_box_sintetico

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kwk6UeRbNxglmhRtJsRS-3fDNboFNVV_
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from google.colab import files
import io

uploaded = files.upload()

for filename in uploaded.keys():
    df = pd.read_csv(io.BytesIO(uploaded[filename]))

colunas_numericas = ['renda_mensal', 'tempo_emprego', 'dividas_total',
                     'historico_credito', 'num_cartoes_credito', 'num_emprestimos',
                     'atraso_pagamento']
for col in colunas_numericas:
    df[col] = pd.to_numeric(df[col], errors='coerce').fillna(df[col].median())

df['relacao_divida_renda'] = df['dividas_total'] / df['renda_mensal']
df['relacao_divida_renda'] = df['relacao_divida_renda'].replace([np.inf, -np.inf], np.nan).fillna(0)

media_historico_credito = np.mean(df['historico_credito'])
print(f"Média do histórico de crédito: {media_historico_credito:.2f}")

plt.figure(figsize=(8, 6))
sns.countplot(x='risco_credito', data=df, order=['Baixo', 'Médio', 'Alto'])
plt.title('Distribuição de Clientes por Risco de Crédito')
plt.xlabel('Risco de Crédito')
plt.ylabel('Número de Clientes')
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x='risco_credito', y='renda_mensal', data=df, order=['Baixo', 'Médio', 'Alto'])
plt.title('Distribuição da Renda Mensal por Risco de Crédito')
plt.xlabel('Risco de Crédito')
plt.ylabel('Renda Mensal')
plt.ylim(0, df['renda_mensal'].quantile(0.95))
plt.show()

df_ml = pd.get_dummies(df, columns=['cargo_atual', 'possui_imovel', 'possui_veiculo'], drop_first=True)

mapeamento_risco = {'Baixo': 0, 'Médio': 1, 'Alto': 2}
df_ml['risco_credito_num'] = df_ml['risco_credito'].map(mapeamento_risco)

features = [col for col in df_ml.columns if col not in ['risco_credito', 'risco_credito_num']]
target = 'risco_credito_num'

X = df_ml[features]
y = df_ml[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

modelo = RandomForestClassifier(n_estimators=100, random_state=42)
modelo.fit(X_train, y_train)

y_pred = modelo.predict(X_test)
acuracia = accuracy_score(y_test, y_pred)
relatorio = classification_report(y_test, y_pred, target_names=['Baixo', 'Médio', 'Alto'])

print(f"\nAcurácia do modelo: {acuracia:.2f}")
print("\nRelatório de Classificação:\n", relatorio)